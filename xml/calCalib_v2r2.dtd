<!--
   $Header: /nfs/slac/g/glast/ground/cvs/calibUtil/xml/calCalib_v2r2.dtd,v 1.2 2004/11/15 20:07:00 jrb Exp $

   /**  @file       calCalib_v2r2.dtd
        @authors    J. Bogart

        dtd for CAL calibration data types

    */

 -->

<!-- 
   Overall structure is some header information followed by
   a sequence of tower data.  Tower data is made up
   of layer data, in turn made up of data for individual
   crystals, which consists of data for (1 or 2, depending
   on calibration type) faces.  

   The header information comes in two parts:
     "generic" is relevant to any sort of calibration data,
               not just that from the CAL, such as the
               name of the instrument being calibrated.
               See further comments above the generic element
               declaration
     "dimension" contains all the parameters necessary to figure 
               out which data goes with which hardware entity.
               See further comments above the dimension element
               declaration
  -->  

<!ELEMENT calCalib (generic, dimension, dac*, xpos?, tower* ) >
       
<!-- Container for all the header/metadata type information to be
     included here.  Complete metadata will be found in the calibration
     MySQL database. 

     Description of attributes:

            instrument    - one of "flight", "EM", etc.  Could also
                            be implemented as enumeration rather than
                            NMTOKEN
            timestamp     - when the file was written (date and time)
            calType       - one of "TKRBadStrips", "CALLightAttenuation",
                            etc.
            formatVersion - sufficient versioning information so that
                            software attempting to read the file can
                            determine if it supports this version. 
                            [Might get rid of this here and just keep
                            it in the MySQL metadata table]
 -->
<!ELEMENT  generic  (inputSample?) >
<!ATTLIST generic  
   instrument  (LAT | BFEM | BTEM | EM | EM2 | CU) #REQUIRED
   timestamp   NMTOKEN #REQUIRED
   calibType (CAL_LightAtt | CAL_LightAsym | CAL_LightYield |
              CAL_Ped | CAL_ElecGain | CAL_IntNonlin | CAL_DiffNonlin |
              CAL_MuSlope | CAL_Asym | CAL_MevPerDac | CAL_TholdCI |
              CAL_TholdMuon)    #REQUIRED
   DTDVersion  NMTOKEN "v2r2"       
   fmtVersion  NMTOKEN #REQUIRED >

<!-- Description of events used as input to the procedure 
     Start- and stop-times should be timestamps of earliest and
     latest events included in sample.
     inputSample is (for now) optional.
-->
<!ELEMENT inputSample (#PCDATA) >
<!ATTLIST inputSample  startTime NMTOKEN #REQUIRED
                       stopTime  NMTOKEN #REQUIRED
                       triggers  NMTOKENS #REQUIRED 
                       source    NMTOKENS #REQUIRED
                       mode      NMTOKEN  #REQUIRED>

<!-- In many cases calibration is done per range: LEX8 is low-energy 
   (= large) diode, x8 amplification; LEX1 is low-energy, low amplification.
   Similarly have HEX8, HEX1 for high-energy (small) diode.
   Unfortunately can't use parameter entities since they aren't allowed
   when the dtd is literally included in an xml file, something
   we'd like to support.
  -->

<!-- For light asymmetry may lump together amplifications (and by
  definition one set of constants applies to both crystal ends, since
  constants quantify *asymmetry*), so have a set of constants per
  diode-type -->

<!-- Describe how the data is dimensioned:
        number of tower rows
        number of tower columns
        number of calorimeter layers
        number of crystals in a layer ("columns")
        number of faces      (mostly 2; 1 for light asymmetry data)
        number of ranges     (fixed at 4? for now just default to 4) 
        number of sets of dac settings (mostly 0)
        number of xpos elements.  Can only be 0 or 1
        exact    may be "true" or "false".  If "true", above information
                 may be mutliplied to compute total number of innermost
                 elements (e.g., calPed)

   Use the following conventions to determine which data element 
   corresponds to a particular physical crystal, optional face and
   gain range:
       * Tower number is computed from row and column as
                 tower = column + (nCol)*row
       * The data can be viewed as a 5-dimensional array where
         the indices from most- to least-significant are
              tower
              layer
              xtal   (often called "column" in calorimeter code)
              face
              range
         So the first two data elements will correspond to 
           (tower=0,layer=0, xtal=0, face=0, range=0)
           (tower=0,layer=0, xtal=0, face=0, range=1)
 
         The total number of data elements (for the default
         case, with exact = "true") is just
                nRow*nCol*nLayer*nXtal*nFace*nRange

 -->
<!ELEMENT dimension EMPTY>
<!ATTLIST dimension nRow NMTOKEN  #REQUIRED
                    nCol NMTOKEN  #REQUIRED
                    nLayer NMTOKEN #REQUIRED
                    nXtal  NMTOKEN #REQUIRED
                    nFace  NMTOKEN #REQUIRED
                    nRange NMTOKEN "4"      
                    nDacCol NMTOKEN "0" 
                    nXpos  (0 | 1) "0"
                    exact  (true | false) "true" >

<!-- For those calibrations involving setting a dac, keep track of
    settings.  Expect one set per range where used; else 0. Number 
    should match value of dimension attribute nDacCol  -->
<!ELEMENT dac EMPTY>
<!ATTLIST dac range (LEX8 | LEX1 | HEX8 | HEX1) #REQUIRED
          values NMTOKENS #REQUIRED
          error  NMTOKEN  #IMPLIED >   <!-- for now.  May want default -->

<!ELEMENT xpos EMPTY>
<!ATTLIST xpos values NMTOKENS #REQUIRED>

<!ELEMENT tower (layer*) >
<!ATTLIST tower iRow NMTOKEN #REQUIRED
                iCol NMTOKEN #REQUIRED 
                hwserial NMTOKEN "-1" >

<!ELEMENT layer (xtal*) >
<!ATTLIST layer iLayer NMTOKEN #REQUIRED>

<!ELEMENT xtal (face, face?) >
<!ATTLIST xtal iXtal NMTOKEN #REQUIRED>

<!-- each face has data for all four ranges, ordered by range number -->
<!ELEMENT face (calPed* | calGain* | muSlope* | lightAsym* | intNonlin*
                        | mevPerDac* | tholdCI* | tholdMuon*
                        | asym* ) >
<!ATTLIST face end (NEG | POS | NA) #REQUIRED >


<!ELEMENT calPed  EMPTY>
<!ATTLIST calPed  range (LEX8 | LEX1 | HEX8 | HEX1) #REQUIRED
                  avg NMTOKEN #REQUIRED
                  sig NMTOKEN #REQUIRED
                  cos NMTOKEN "2" >

<!ELEMENT calGain EMPTY>
<!ATTLIST calGain range (LEX8 | LEX1 | HEX8 | HEX1) #REQUIRED
                  avg NMTOKEN #REQUIRED
                  sig NMTOKEN #REQUIRED>

<!ELEMENT muSlope EMPTY>
<!ATTLIST muSlope range (LEX8 | LEX1 | HEX8 | HEX1) #REQUIRED
                  slope NMTOKEN #REQUIRED
                  error NMTOKEN "0.0" >

<!ELEMENT lightAsym EMPTY>
<!ATTLIST lightAsym diode (LE | HE) #REQUIRED
                    values NMTOKENS #REQUIRED
                    error NMTOKEN #REQUIRED >

<!ELEMENT intNonlin EMPTY>
<!ATTLIST intNonlin range (LEX8 | LEX1 | HEX8 | HEX1) #REQUIRED
                    values NMTOKENS #REQUIRED
                    error NMTOKEN   #REQUIRED >

<!-- Some of mevPerDac information is per-crystal, some is per face.  So
     <mevPerDac> is identified by tower/layer/crystal and contains two
     <bigSmall> elements for the per-face information. 
 -->
<!ELEMENT mevPerDac (bigSmall, bigSmall) >
<!ATTLIST mevPerDac bigVal NMTOKEN #REQUIRED
                    bigSig NMTOKEN #REQUIRED
                    smallVal NMTOKEN #REQUIRED
                    smallSig NMTOKEN #REQUIRED
>
<!ELEMENT bigSmall EMPTY>
<!ATTLIST bigSmall  end (NEG | POS) #REQUIRED
                    bigSmallRatioVals NMTOKENS #REQUIRED
                    bigSmallRatioSigs NMTOKENS #REQUIRED
>

<!ELEMENT asym EMPTY>
<!ATTLIST asym bigVals NMTOKENS #REQUIRED
               bigSigs NMTOKENS #REQUIRED
               smallVals  NMTOKENS #REQUIRED
               smallSigs  NMTOKENS #REQUIRED
               NsmallPbigVals NMTOKENS #REQUIRED
               NsmallPbigSigs NMTOKENS #REQUIRED
               PsmallNbigVals NMTOKENS #REQUIRED
               PsmallNbigSigs NMTOKENS #REQUIRED
>

<!-- Some of tholdCI information is per-crystal-face, some is per range.  So
     <tholdCI> is identified by tower/layer/crystal/face and contains up
       to 4 tholdCIRange elements for per-range information
 -->
<!ELEMENT tholdCI (tholdCIRange, tholdCIRange?, tholdCIRange?, tholdCIRange?) >
<!ATTLIST tholdCI FLEVal NMTOKEN #REQUIRED
                  FLESig NMTOKEN #REQUIRED
                  FHEVal NMTOKEN #REQUIRED
                  FHESig NMTOKEN #REQUIRED
                  LACVal NMTOKEN #REQUIRED
                  LACSig NMTOKEN #REQUIRED
>

<!ELEMENT tholdCIRange EMPTY>
<!ATTLIST tholdCIRange range (LEX8 | LEX1 | HEX8 | HEX1) #REQUIRED
                       pedVal NMTOKEN #REQUIRED
                       pedSig NMTOKEN #REQUIRED
                       ULDVal NMTOKEN #REQUIRED
                       ULDSig NMTOKEN #REQUIRED
>

<!-- Some of tholdMuon information is per-crystal-face, some is per range.  So
     <tholdMuon> is identified by tower/layer/crystal/face and contains up
       to 4 tholdMuonRange elements for per-range information
 -->
<!ELEMENT tholdMuon (tholdMuonRange, tholdMuonRange?, tholdMuonRange?, 
                     tholdMuonRange?) >
<!ATTLIST tholdMuon FLEVal NMTOKEN #REQUIRED
                    FLESig NMTOKEN #REQUIRED
                    FHEVal NMTOKEN #REQUIRED
                    FHESig NMTOKEN #REQUIRED >

<!ELEMENT tholdMuonRange EMPTY>
<!ATTLIST tholdMuonRange range (LEX8 | LEX1 | HEX8 | HEX1) #REQUIRED
                         pedVal NMTOKEN #REQUIRED
                         pedSig NMTOKEN #REQUIRED
>

